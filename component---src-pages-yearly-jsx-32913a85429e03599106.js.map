{"version":3,"sources":["webpack:///./src/pages/yearly.jsx"],"names":["Landscape","type","buildDataSet","label","color","stringToColour","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Graph","calculation","heroData","labels","useState","Date","now","setNow","nextYear","delta","newDate","valueOf","setFullYear","getFullYear","window","analytics","track","yearly","dates","data","datasets","fajr","sunrise","dhuhr","asr","maghrib","isha","map","timings","value","toLocaleDateString","month","day","i","eventName","time","d","getTime","setDate","setMonth","getMonth","y","length","title","description","className","onClick","style","border","outline","options","scales","yAxes","distribution","unit","ticks","source","responsive","tooltips","callbacks","index","datasetIndex","current"],"mappings":"8FAAA,mFAOMA,EAAY,kBAAM,iCAAOC,KAAK,YAAY,0CAE1CC,EAAe,SAACC,GACpB,IAAMC,EAAQC,yBAAeF,GAE7B,MAAO,CACLA,QACAG,MAAM,EACNC,YAAa,GACbC,gBAAiBJ,EACjBK,YAAaL,EACbM,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkBV,EAClBW,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2Bd,EAC3Be,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,KA4GLC,UAxGD,WAAO,IACXC,EAAwBC,IAAxBD,YAAaE,EAAWD,IAAXC,OADH,EAEIC,mBAAS,IAAIC,MAA5BC,EAFW,KAENC,EAFM,KAIZC,EAAW,SAACC,GAAD,gBAACA,MAAQ,GAAM,WAC9B,IAAMC,EAAU,IAAIL,KAAKC,EAAIK,WAC7BD,EAAQE,YAAYF,EAAQG,cAAgBJ,GAC5CF,EAAOG,GAEHI,OAAOC,WACTD,OAAOC,UAAUC,MAAgB,IAAVP,EAAc,kBAAoB,qBAV3C,EAcOQ,iBAAOd,EAAQF,EAAaK,GAA7CY,EAdU,EAcVA,MAAOtC,EAdG,EAcHA,MAETuC,EAAO,CACXC,SAAU,CACRzC,EAAawB,EAAOkB,MACpB1C,EAAawB,EAAOmB,SACpB3C,EAAawB,EAAOoB,OACpB5C,EAAawB,EAAOqB,KACpB7C,EAAawB,EAAOsB,SACpB9C,EAAawB,EAAOuB,QAGxBP,EAAKhB,OAASe,EAAMS,KAAI,YAEtB,OAFuC,EAAdC,QAAc,GAE3BC,MAAMC,mBAAmB,QAAS,CAC5CC,MAAO,QACPC,IAAK,eAIT,IAlCkB,eAkCTC,GACPd,EAAKC,SAASa,GAAGd,KAAOD,EAAMS,KAAI,YAAkB,IAAD,IAAdC,QACeK,GAA1CJ,EADyC,EACzCA,MAAcK,EAD2B,EAClCtD,MAAkBuD,EADgB,EAChBA,KAC3BC,EAAI,IAAI/B,KAAKwB,EAAMQ,WAKzB,OAJAD,EAAEE,QAAQ,GACVF,EAAEG,SAASjC,EAAIkC,YACfJ,EAAExB,YAAYN,EAAIO,eAEX,CAAE4B,EAAGL,EAAGxD,MAAOsD,EAAWC,YAR5BF,EAAI,EAAGA,EAAId,EAAKC,SAASsB,OAAQT,GAAK,EAAI,EAA1CA,GAYT,OACE,mCACE,wBAAC,IAAD,CACEU,MAAM,wBACNC,YAAY,wEAEd,wBAACnE,EAAD,MACA,kCACE,kCACEC,KAAK,SACLmE,UAAU,uBACVC,QAAStC,GAAU,GACnBuC,MAAO,CAAE9D,gBAAiB,cAAe+D,OAAQ,OAAQC,QAAS,SAJpE,KAQCrE,EACD,kCACEF,KAAK,SACLmE,UAAU,uBACVC,QAAStC,EAAS,GAClBuC,MAAO,CAAE9D,gBAAiB,cAAe+D,OAAQ,OAAQC,QAAS,SAJpE,MASF,wBAAC,OAAD,CACE9B,KAAMA,EACN+B,QAAS,CACPC,OAAQ,CACNC,MAAO,CACL,CACEC,aAAc,SACd3E,KAAM,OACNyD,KAAM,CACJmB,KAAM,UAERC,MAAO,CACLC,OAAQ,WAKhBC,YAAY,EACZC,SAAU,CACRC,UAAW,CACT/E,MAAO,cAA4C,IAAzCgF,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,aACTC,EAD0C,EAAf1C,SACRyC,GAAc1C,KAAKyC,GAC5C,OAAUE,EAAQlF,MAAlB,KAA4BkF,EAAQ3B","file":"component---src-pages-yearly-jsx-32913a85429e03599106.js","sourcesContent":["import React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport SEO from '../components/seo';\nimport { heroData } from '../mock/data';\nimport { yearly } from '../utils/calculator';\nimport { stringToColour } from '../utils/stringUtils';\n\nconst Landscape = () => <style type=\"text/css\">{'@media print{@page {size: landscape}}'}</style>;\n\nconst buildDataSet = (label) => {\n  const color = stringToColour(label);\n\n  return {\n    label,\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: color,\n    borderColor: color,\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: color,\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: color,\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n  };\n};\n\nconst Graph = () => {\n  const { calculation, labels } = heroData;\n  const [now, setNow] = useState(new Date());\n\n  const nextYear = (delta = 1) => () => {\n    const newDate = new Date(now.valueOf());\n    newDate.setFullYear(newDate.getFullYear() + delta);\n    setNow(newDate);\n\n    if (window.analytics) {\n      window.analytics.track(delta === 1 ? 'NextYearTimings' : 'PrevYearTimings');\n    }\n  };\n\n  const { dates, label } = yearly(labels, calculation, now);\n\n  const data = {\n    datasets: [\n      buildDataSet(labels.fajr),\n      buildDataSet(labels.sunrise),\n      buildDataSet(labels.dhuhr),\n      buildDataSet(labels.asr),\n      buildDataSet(labels.maghrib),\n      buildDataSet(labels.isha),\n    ],\n  };\n  data.labels = dates.map(({ timings }) => {\n    const [fajr] = timings;\n    return fajr.value.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n    });\n  });\n\n  for (let i = 0; i < data.datasets.length; i += 1) {\n    data.datasets[i].data = dates.map(({ timings }) => {\n      const { value, label: eventName, time } = timings[i];\n      const d = new Date(value.getTime());\n      d.setDate(1);\n      d.setMonth(now.getMonth());\n      d.setFullYear(now.getFullYear());\n\n      return { y: d, label: eventName, time };\n    });\n  }\n\n  return (\n    <div>\n      <SEO\n        title=\"Yearly Schedule Graph\"\n        description=\"Graph of yearly schedule for prayer times for Dar as-Sahaba, Ottawa\"\n      />\n      <Landscape />\n      <h2>\n        <button\n          type=\"button\"\n          className=\"arrow-button cta-btn\"\n          onClick={nextYear(-1)}\n          style={{ backgroundColor: 'transparent', border: 'none', outline: 'none' }}\n        >\n          &lt;\n        </button>\n        {label}\n        <button\n          type=\"button\"\n          className=\"arrow-button cta-btn\"\n          onClick={nextYear(1)}\n          style={{ backgroundColor: 'transparent', border: 'none', outline: 'none' }}\n        >\n          &gt;\n        </button>\n      </h2>\n      <Line\n        data={data}\n        options={{\n          scales: {\n            yAxes: [\n              {\n                distribution: 'series',\n                type: 'time',\n                time: {\n                  unit: 'minute',\n                },\n                ticks: {\n                  source: 'auto',\n                },\n              },\n            ],\n          },\n          responsive: true,\n          tooltips: {\n            callbacks: {\n              label: ({ index, datasetIndex }, { datasets }) => {\n                const current = datasets[datasetIndex].data[index];\n                return `${current.label}: ${current.time}`;\n              },\n            },\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Graph;\n"],"sourceRoot":""}