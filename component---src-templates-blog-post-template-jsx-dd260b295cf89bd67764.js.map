{"version":3,"sources":["webpack:///./src/templates/BlogPostTemplate.jsx","webpack:///./src/components/seo.js"],"names":["BlogPostTemplate","data","pageContext","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","frontmatter","description","imageUrl","date","id","excerpt","to","style","display","className","loading","src","alt","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","fields","slug","rel","normalize","input","replace","SEO","lang","meta","useStaticQuery","metaDescription","metaTitle","htmlAttributes","defer","name","content","property","author","concat","defaultProps"],"mappings":"4FAAA,+CAiEeA,UA7DU,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAC1BC,EAAOF,EAAKG,eACZC,EAAYJ,EAAKK,KAAKC,aAAaC,MACjCC,EAAmBP,EAAnBO,SAAUC,EAASR,EAATQ,KAHgC,EAIHP,EAAKQ,YAA5CC,EAJ0C,EAI1CA,YAAaC,EAJ6B,EAI7BA,SAAUL,EAJmB,EAInBA,MAAOM,EAJY,EAIZA,KAEtC,OACE,mCAASC,GAAG,YACV,wBAAC,IAAD,CAAKP,MAAOA,EAAOI,YAAaA,GAAeT,EAAKa,UACpD,uCACE,sCACE,wBAAC,OAAD,CAAMC,GAAG,KAAKZ,GACd,oCAEF,kCAAKG,GACL,6BACEU,MAAO,CACLC,QAAQ,UAGTL,GAEFD,GACC,+BAAKO,UAAU,0BACb,+BAAKC,QAAQ,OAAOC,IAAKT,EAAUU,IAAKf,EAAOY,UAAU,UAG7D,mCAASI,wBAAyB,CAAEC,OAAQtB,EAAKuB,QACjD,oCAGF,mCACE,8BACER,MAAO,CACLC,QAAQ,OACRQ,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,kCACGrB,GACC,wBAAC,OAAD,CAAMQ,GAAIR,EAASsB,OAAOC,KAAMC,IAAI,QAApC,KACKxB,EAASE,YAAYH,QAI9B,kCACGE,GACC,wBAAC,OAAD,CAAMO,GAAIP,EAAKqB,OAAOC,KAAMC,IAAI,QAC7BvB,EAAKC,YAAYH,MADpB,Y,kCCtDd,wCAaM0B,EAAY,SAACC,GAAD,OAAWA,GAASA,EAAMD,WAAaC,EAAMD,UAAU,QAAQE,QAAQ,mBAAoB,KAE7G,SAASC,EAAT,GAAkD,IAAnCzB,EAAkC,EAAlCA,YAAa0B,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAM/B,EAAS,EAATA,MAC9BF,EAASkC,yBAAe,YAAxBlC,KAcFmC,EAAkBP,EAAUtB,GAAeN,EAAKC,aAAaK,aAC7D8B,EAAYR,EAAU1B,GAE5B,OACE,wBAAC,IAAD,CACEmC,eAAgB,CACdL,QAEFM,OAAO,EACPpC,MAAOkC,EAEPH,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASJ,GAEX,CACEK,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASxC,EAAKC,aAAayC,QAE7B,CACEH,KAAK,gBACLC,QAASJ,GAEX,CACEG,KAAK,sBACLC,QAASL,IAEXQ,OAAOV,KAKfF,EAAIa,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACN3B,YAAY,IAUCyB","file":"component---src-templates-blog-post-template-jsx-dd260b295cf89bd67764.js","sourcesContent":["import { graphql, Link } from 'gatsby';\nimport React from 'react';\nimport SEO from '../components/seo';\n\nconst BlogPostTemplate = ({ data, pageContext }) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata.title;\n  const { previous, next } = pageContext;\n  const { description, imageUrl, title, date } = post.frontmatter;\n\n  return (\n    <section id=\"projects\">\n      <SEO title={title} description={description || post.excerpt} />\n      <article>\n        <header>\n          <Link to=\"/\">{siteTitle}</Link>\n          <hr />\n        </header>\n        <h1>{title}</h1>\n        <p\n          style={{\n            display: `block`,\n          }}\n        >\n          {date}\n        </p>\n        {imageUrl && (\n          <div className=\"project-wrapper__image\">\n            <img loading=\"lazy\" src={imageUrl} alt={title} className=\"full\" />\n          </div>\n        )}\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr />\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </section>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        imageUrl\n      }\n    }\n  }\n`;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport { graphql, useStaticQuery } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\n// https://github.com/LasaleFamine/string-normalize-es6/blob/master/src/index.js\nconst normalize = (input) => input && input.normalize && input.normalize('NFKD').replace(/[\\u0300-\\u036f]/g, '') ;\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = normalize(description || site.siteMetadata.description);\n  const metaTitle = normalize(title);\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      defer={false}\n      title={metaTitle}\n      // titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: metaTitle,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: metaTitle,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}